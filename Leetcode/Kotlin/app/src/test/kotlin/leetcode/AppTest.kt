/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package leetcode

import TwoPointer.threeSum
import TwoPointer.twoSum
import TwoPointer.twoSum2
import TwoPointer.waterSolution
import isPalindrome
import isPalindrome2
import readyToLeft
import readyToRight
import kotlin.test.Test
import kotlin.test.assertEquals
import kotlin.test.assertNotNull

class AppTest {
   class ProductOfArrayExceptSelfTest {
       @Test
       fun readyFunctionTest() {
           val nums = intArrayOf(1,2,3,4)
           assertEquals(
               expected = listOf(1,1,2,6),
               actual = readyToLeft(nums)
           )
           assertEquals(
               expected = listOf(24, 12, 4, 1),
               actual = readyToRight(nums)
           )
       }
   }

    class LongestConsecutiveSequenceTest {
        @Test
        fun findMaxLength() {
            assertEquals(
                expected = 6,
                actual = ArraysAndHashing.findMaxLength(
                    hash = mapOf(
                        0 to listOf(1,2,3,4),
                        1 to listOf(1,2,3,3,1,1),
                        2 to listOf(1,2),
                    )
                )
            )
        }
//        @Test
//        fun createSequenceMap() {
//            val list = listOf(0,1,2,3,6,7,10,11,12,234,566)
//            assertEquals(
//                expected = mapOf(
//                    0 to listOf(0,1,2,3),
//                    1 to listOf(6,7)
//                ),
//                actual = ArraysAndHashing.createSequenceMap(list)
//            )
//        }
        @Test
        fun solution() {
            assertEquals(
                expected = 4,
                actual = ArraysAndHashing.solutionSequence(intArrayOf(100,4,200,1,3,2))
            )
            assertEquals(
                expected = 9,
                actual = ArraysAndHashing.solutionSequence(intArrayOf(0,3,7,2,5,8,4,6,0,1))
            )
        }

    }

    class ValidPalindrome {
        @Test
        fun test() {
            assertEquals(
                true,
                isPalindrome("A man, a plan, a canal: Panama")
            )
            assertEquals(
                true,
                isPalindrome2("A man, a plan, a canal: Panama")
            )
        }
    }

    class TwoSumII {
        @Test
        fun test1() {
            assertEquals(
                intArrayOf(1,2).toList(),
                twoSum(intArrayOf(2,7,11,15), target = 9).toList()
            )
        }
        @Test
        fun test2() {
            assertEquals(
                intArrayOf(1,3).toList(),
                twoSum(intArrayOf(2,3,4), target = 6).toList()
            )
        }
        @Test
        fun test3() {
            assertEquals(
                intArrayOf(1,2).toList(),
                twoSum(intArrayOf(-1,0), target = -1).toList()
            )
        }

        @Test
        fun test4() {
            assertEquals(
                intArrayOf(1,2).toList(),
                twoSum2(intArrayOf(2,7,11,15), target = 9).toList()
            )
        }
        @Test
        fun test5() {
            assertEquals(
                intArrayOf(1,3).toList(),
                twoSum2(intArrayOf(2,3,4), target = 6).toList()
            )
        }
        @Test
        fun test6() {
            assertEquals(
                intArrayOf(1,2).toList(),
                twoSum2(intArrayOf(-1,0), target = -1).toList()
            )
        }
    }

    class ThreeSumII {
        @Test
        fun test1() {
            assertEquals(
                listOf(listOf(-1,-1,2), listOf(-1,0,1)),
                threeSum(intArrayOf(-1,0,1,2,-1,-4))
            )
        }
    }

    class ComtainerWithMostWater {
        @Test
        fun test() {
            assertEquals(
                49,
                waterSolution(intArrayOf(1,8,6,2,5,4,8,3,7))
            )
            assertEquals(
                1,
                waterSolution(intArrayOf(1,1))
            )
        }
    }

    class Temp {
        @Test
        fun hashSetTest() {
            val hashSet = HashSet<String>()
            assertEquals(
                expected = true ,
                actual = hashSet.add("s")
            )
            assertEquals(
                expected = false ,
                actual = hashSet.add("s")
            )
        }
        @Test
        fun hashTest() {
            val hash = mapOf<Int, List<Int>>()
            assertEquals(
                expected = 0 ,
                actual = mapOf<Int, List<Int>>().size
            )

            assertEquals(
                expected = 2 ,
                actual = mapOf(
                    0 to listOf(0),
                    1 to listOf(0),
                ).size
            )
        }
    }
}
